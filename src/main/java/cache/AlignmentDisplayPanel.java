package cache;

import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.ComponentInputMap;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.ActionMapUIResource;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.EditorKit;
import cache.util.TextTransfer;

/**
 *
 * @author Manjunath Kustagi
 */
public class AlignmentDisplayPanel extends javax.swing.JPanel {

    static int openFrameCount = 0;
    static final int xOffset = 30, yOffset = 30;
    protected TextTransfer tt = new TextTransfer();
    protected ActionMap actionMap = new ActionMapUIResource();

    /**
     * Creates new form AlignmentDisplayPanel
     */
    public AlignmentDisplayPanel() {
        initComponents();
        openFrameCount++;
        setLocation(xOffset * openFrameCount, yOffset * openFrameCount);
        scaledTextPane1.setContentType("text/html");
        scaledTextPane1.getDocument().putProperty("i18n", Boolean.FALSE);
        scaledTextPane1.getDocument().putProperty("ZOOM_FACTOR", 1.0);

        Action zoomInAction = new ZoomInAction("", new javax.swing.ImageIcon(getClass().getResource("/cache/resources/View-zoom-in.png")), "Zoom In");
        Action zoomOutAction = new ZoomOutAction("", new javax.swing.ImageIcon(getClass().getResource("/cache/resources/View-zoom-out.png")), "Zoom Out");

        zoomIn.setAction(zoomInAction);
        zoomOut.setAction(zoomOutAction);


        actionMap.put("zoom_in", zoomInAction);
        actionMap.put("zoom_out", zoomOutAction);
    }

    public void setText(String text) {
        try {
            int mask = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();
            InputMap keyMap = new ComponentInputMap(this);
            keyMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_EQUALS,
                    mask), "zoom_in");
            keyMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_MINUS,
                    mask), "zoom_out");
            SwingUtilities.replaceUIActionMap(this, actionMap);
            SwingUtilities.replaceUIInputMap(this, JComponent.WHEN_IN_FOCUSED_WINDOW,
                    keyMap);

            Reader stringReader = new StringReader(text);
            EditorKit htmlKit = scaledTextPane1.getEditorKit();
            Document htmlDoc = scaledTextPane1.getDocument();
            htmlKit.read(stringReader, htmlDoc, 0);
            scaledTextPane1.recreateListeners();
        } catch (IOException | BadLocationException ex) {
            Logger.getLogger(AlignmentDisplayPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        copyButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        pasteButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        zoomIn = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        zoomOut = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        scaledTextPane1 = new cache.util.ScaledTextPane();

        setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cache/resources/document-save22.png"))); // NOI18N
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setMaximumSize(new java.awt.Dimension(25, 25));
        saveButton.setMinimumSize(new java.awt.Dimension(25, 25));
        saveButton.setPreferredSize(new java.awt.Dimension(25, 25));
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(saveButton);
        jToolBar1.add(jSeparator1);

        copyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cache/resources/edit-copy22.png"))); // NOI18N
        copyButton.setFocusable(false);
        copyButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyButton.setMaximumSize(new java.awt.Dimension(25, 25));
        copyButton.setMinimumSize(new java.awt.Dimension(25, 25));
        copyButton.setPreferredSize(new java.awt.Dimension(25, 25));
        copyButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(copyButton);
        jToolBar1.add(jSeparator2);

        pasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cache/resources/edit-paste22.png"))); // NOI18N
        pasteButton.setFocusable(false);
        pasteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pasteButton.setMaximumSize(new java.awt.Dimension(25, 25));
        pasteButton.setMinimumSize(new java.awt.Dimension(25, 25));
        pasteButton.setPreferredSize(new java.awt.Dimension(25, 25));
        pasteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(pasteButton);
        jToolBar1.add(jSeparator4);

        zoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cache/resources/View-zoom-in.png"))); // NOI18N
        zoomIn.setFocusable(false);
        zoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomIn.setMaximumSize(new java.awt.Dimension(25, 25));
        zoomIn.setMinimumSize(new java.awt.Dimension(25, 25));
        zoomIn.setPreferredSize(new java.awt.Dimension(25, 25));
        zoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInActionPerformed(evt);
            }
        });
        jToolBar1.add(zoomIn);
        jToolBar1.add(jSeparator3);

        zoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/cache/resources/View-zoom-out.png"))); // NOI18N
        zoomOut.setFocusable(false);
        zoomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOut.setMaximumSize(new java.awt.Dimension(25, 25));
        zoomOut.setMinimumSize(new java.awt.Dimension(25, 25));
        zoomOut.setPreferredSize(new java.awt.Dimension(25, 25));
        zoomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutActionPerformed(evt);
            }
        });
        jToolBar1.add(zoomOut);

        add(jToolBar1, java.awt.BorderLayout.PAGE_START);

        jScrollPane1.setViewportView(scaledTextPane1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        FileFilter fileFilter = new FileNameExtensionFilter("Alignment File Filter", "txt");
        JFileChooser fc = new JFileChooser();
        fc.setName("Save Alignment");
        fc.setFileFilter(fileFilter);
        int option = fc.showSaveDialog(this);
        if (JFileChooser.APPROVE_OPTION == option) {
            BufferedWriter bw = null;
            try {
                File file = fc.getSelectedFile();
                bw = new BufferedWriter(new FileWriter(file));
                bw.write(scaledTextPane1.getText());
                bw.flush();
                bw.close();
            } catch (IOException ex) {
                Logger.getLogger(AlignmentDisplayPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        tt.setClipboardContents(scaledTextPane1.getSelectedText());
    }//GEN-LAST:event_copyButtonActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        scaledTextPane1.replaceSelection(tt.getClipboardContents());
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void zoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInActionPerformed
        scaledTextPane1.getZoomInListener().actionPerformed(evt);
    }//GEN-LAST:event_zoomInActionPerformed

    private void zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutActionPerformed
        scaledTextPane1.getZoomOutListener().actionPerformed(evt);
    }//GEN-LAST:event_zoomOutActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton copyButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton pasteButton;
    private javax.swing.JButton saveButton;
    private cache.util.ScaledTextPane scaledTextPane1;
    private javax.swing.JButton zoomIn;
    private javax.swing.JButton zoomOut;
    // End of variables declaration//GEN-END:variables

    class ZoomInAction extends AbstractAction {

        public ZoomInAction(String text, ImageIcon icon, String desc) {
            super(text, icon);
            putValue(SHORT_DESCRIPTION, desc);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            zoomInActionPerformed(e);
        }
    }

    class ZoomOutAction extends AbstractAction {

        public ZoomOutAction(String text, ImageIcon icon, String desc) {
            super(text, icon);
            putValue(SHORT_DESCRIPTION, desc);
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            zoomOutActionPerformed(e);
        }
    }
}
