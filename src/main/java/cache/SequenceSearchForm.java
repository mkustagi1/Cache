package cache;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComponent;
import javax.swing.SwingWorker;
import org.biojava3.core.sequence.DNASequence;
import org.biojava3.core.sequence.compound.NucleotideCompound;
import org.biojava3.core.sequence.views.ComplementSequenceView;
import org.biojava3.core.sequence.views.ReversedSequenceView;
import cache.dataimportes.holders.SearchResult;
import cache.dataimportes.holders.Strand;
import cache.util.CursorToolkitOne;
import cache.util.TextTransfer;
import cache.workers.ExperimentTableWorker;
import cache.workers.SearchWorker;

/**
 *
 * @author Manjunath Kustagi
 */
public class SequenceSearchForm extends javax.swing.JPanel {

    protected TextTransfer tt = new TextTransfer();

    /**
     * Creates new form SequenceSearchForm
     */
    public SequenceSearchForm() {
        initComponents();
        ExperimentTableWorker worker = new ExperimentTableWorker();
        int experimentCount = worker.getPageSize();
        List<String> comboBoxItems = new ArrayList<>();
        for (int i = 0; i < experimentCount; i++) {
            String exp = (new Long(worker.getExperiment(i, 0).experimentID)).toString();
            comboBoxItems.add(exp);
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel(comboBoxItems.toArray());
        experimentList.setModel(model);

        comboBoxItems = new ArrayList<>();
        comboBoxItems.add("Transcripts");
        model = new DefaultComboBoxModel(comboBoxItems.toArray());
        dbList.setModel(model);

        comboBoxItems = new ArrayList<>();
        comboBoxItems.add("200");
        comboBoxItems.add("101");
        comboBoxItems.add("40");
        comboBoxItems.add("20");
        comboBoxItems.add("10");
        model = new DefaultComboBoxModel(comboBoxItems.toArray());
        readsExactMatches.setModel(model);

        comboBoxItems = new ArrayList<>();
        comboBoxItems.add("101");
        comboBoxItems.add("40");
        comboBoxItems.add("20");
        model = new DefaultComboBoxModel(comboBoxItems.toArray());
        dbExactMatches.setModel(model);

        buttonGroup1.add(frReads);
        buttonGroup1.add(fReads);
        buttonGroup1.add(rReads);

        buttonGroup2.add(frDb);
        buttonGroup2.add(fDb);
        buttonGroup2.add(rDb);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dbList = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        dbExactMatches = new javax.swing.JComboBox();
        searchDb = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        publicDatabaseCount = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        frDb = new javax.swing.JRadioButton();
        fDb = new javax.swing.JRadioButton();
        rDb = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        experimentList = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        readsExactMatches = new javax.swing.JComboBox();
        searchReads = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        readCount = new javax.swing.JTextField();
        jPanel7 = new javax.swing.JPanel();
        frReads = new javax.swing.JRadioButton();
        fReads = new javax.swing.JRadioButton();
        rReads = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sequenceText = new javax.swing.JTextArea();
        pasteButton = new javax.swing.JButton();
        reverseComplementCheckBox = new javax.swing.JCheckBox();
        jScrollPane4 = new javax.swing.JScrollPane();
        dockingAlignmentDisplay1 = new cache.docking.javadocking.DockingAlignmentDisplay();

        setPreferredSize(new java.awt.Dimension(800, 520));

        jPanel1.setPreferredSize(new java.awt.Dimension(550, 510));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setPreferredSize(new java.awt.Dimension(267, 260));

        jLabel1.setText("Search Curated Transcripts");
        jLabel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setText("Database:");

        dbList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dbList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbListdatabaseSelectActionPerformed(evt);
            }
        });

        jLabel6.setText("Exact Match Length: ");

        dbExactMatches.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dbExactMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dbExactMatchesSelectActionPerformed(evt);
            }
        });

        searchDb.setText("Search Curated Transcripts");
        searchDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDatabaseActionPerformed(evt);
            }
        });

        jLabel8.setText("Limit Results to:");
        jLabel8.setToolTipText("maximum number of results");

        publicDatabaseCount.setText("100");

        jPanel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        frDb.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        frDb.setSelected(true);
        frDb.setText("F & R");
        frDb.setToolTipText("Both Strands");
        frDb.setMaximumSize(new java.awt.Dimension(55, 15));
        frDb.setMinimumSize(new java.awt.Dimension(55, 15));
        frDb.setPreferredSize(new java.awt.Dimension(55, 15));
        frDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frDbActionPerformed(evt);
            }
        });

        fDb.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        fDb.setText("F");
        fDb.setToolTipText("Forward Strand");
        fDb.setMaximumSize(new java.awt.Dimension(41, 15));
        fDb.setMinimumSize(new java.awt.Dimension(41, 15));
        fDb.setPreferredSize(new java.awt.Dimension(41, 15));
        fDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fDbActionPerformed(evt);
            }
        });

        rDb.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        rDb.setText("R");
        rDb.setToolTipText("Reverse Complement Strand");
        rDb.setMaximumSize(new java.awt.Dimension(41, 15));
        rDb.setMinimumSize(new java.awt.Dimension(41, 15));
        rDb.setPreferredSize(new java.awt.Dimension(41, 15));
        rDb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rDbActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel6Layout = new org.jdesktop.layout.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(frDb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fDb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rDb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel6Layout.createSequentialGroup()
                .add(frDb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fDb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(rDb, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel2Layout.createSequentialGroup()
                                .add(jLabel8)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(publicDatabaseCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                                .add(jLabel6)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 8, Short.MAX_VALUE)
                                .add(dbExactMatches, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                                .add(jLabel4)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(dbList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 142, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                                .add(165, 165, 165)
                                .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(6, 6, 6)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 186, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .add(searchDb, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(12, 12, 12)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .add(20, 20, 20)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(30, 30, 30)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 26, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(dbList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(25, 25, 25)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel6)
                    .add(dbExactMatches, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(27, 27, 27)
                        .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(publicDatabaseCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel8)))
                    .add(jPanel2Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(jPanel6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(searchDb)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel2.setText("Search Reads");
        jLabel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Experiment: ");

        experimentList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        experimentList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                experimentListSelectActionPerformed(evt);
            }
        });

        jLabel5.setText("Exact Match Length: ");

        readsExactMatches.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        readsExactMatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readsExactMatchesSelectActionPerformed(evt);
            }
        });

        searchReads.setText("Search Reads");
        searchReads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchReadsActionPerformed(evt);
            }
        });

        jLabel9.setText("Limit Results to:");
        jLabel9.setToolTipText("maximum number of results");

        readCount.setText("100");

        jPanel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        frReads.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        frReads.setSelected(true);
        frReads.setText("F & R");
        frReads.setToolTipText("Both Strands");
        frReads.setMaximumSize(new java.awt.Dimension(55, 15));
        frReads.setMinimumSize(new java.awt.Dimension(55, 15));
        frReads.setPreferredSize(new java.awt.Dimension(55, 15));
        frReads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                frReadsActionPerformed(evt);
            }
        });

        fReads.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        fReads.setText("F");
        fReads.setToolTipText("Forward Strand");
        fReads.setMaximumSize(new java.awt.Dimension(41, 15));
        fReads.setMinimumSize(new java.awt.Dimension(41, 15));
        fReads.setPreferredSize(new java.awt.Dimension(41, 15));
        fReads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fReadsActionPerformed(evt);
            }
        });

        rReads.setFont(new java.awt.Font("Lucida Grande", 0, 8)); // NOI18N
        rReads.setText("R");
        rReads.setToolTipText("Reverse Complement Strand");
        rReads.setMaximumSize(new java.awt.Dimension(41, 15));
        rReads.setMinimumSize(new java.awt.Dimension(41, 15));
        rReads.setPreferredSize(new java.awt.Dimension(41, 15));
        rReads.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rReadsActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel7Layout = new org.jdesktop.layout.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(frReads, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(fReads, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(rReads, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel7Layout.createSequentialGroup()
                .add(frReads, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(fReads, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(rReads, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 14, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        org.jdesktop.layout.GroupLayout jPanel3Layout = new org.jdesktop.layout.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(searchReads, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 117, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(64, 64, 64))
            .add(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(jLabel9)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(readCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(171, 171, 171)
                        .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(jLabel5)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(readsExactMatches, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel3Layout.createSequentialGroup()
                        .add(jLabel3)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(experimentList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 133, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jPanel3Layout.createSequentialGroup()
                .add(6, 6, 6)
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 123, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(132, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel3Layout.createSequentialGroup()
                .add(18, 18, 18)
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 33, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(34, 34, 34)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel3)
                    .add(experimentList, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(23, 23, 23)
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel5)
                    .add(readsExactMatches, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(26, 26, 26)
                        .add(jPanel3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(readCount, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel9)))
                    .add(jPanel3Layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(jPanel7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 22, Short.MAX_VALUE)
                .add(searchReads)
                .addContainerGap())
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setText("Paste Sequence:");

        sequenceText.setColumns(20);
        sequenceText.setLineWrap(true);
        sequenceText.setRows(5);
        jScrollPane1.setViewportView(sequenceText);

        pasteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/anvesana/resources/edit-paste22.png"))); // NOI18N
        pasteButton.setFocusable(false);
        pasteButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pasteButton.setMaximumSize(new java.awt.Dimension(25, 25));
        pasteButton.setMinimumSize(new java.awt.Dimension(25, 25));
        pasteButton.setPreferredSize(new java.awt.Dimension(25, 25));
        pasteButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        reverseComplementCheckBox.setText("Transform to Reverse Complement");
        reverseComplementCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseComplementCheckBoxActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel5Layout = new org.jdesktop.layout.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1)
                    .add(jPanel5Layout.createSequentialGroup()
                        .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jPanel5Layout.createSequentialGroup()
                                .add(jLabel7)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(pasteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(reverseComplementCheckBox))
                        .add(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel5Layout.createSequentialGroup()
                .add(jPanel5Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jLabel7)
                    .add(pasteButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(reverseComplementCheckBox)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(jPanel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jPanel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE))
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel1);

        dockingAlignmentDisplay1.setPreferredSize(new java.awt.Dimension(200, 513));
        jScrollPane4.setViewportView(dockingAlignmentDisplay1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 581, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 580, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(jScrollPane4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 520, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jScrollPane2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 520, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(369, 369, 369))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void dbListdatabaseSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbListdatabaseSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbListdatabaseSelectActionPerformed

    private void dbExactMatchesSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dbExactMatchesSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dbExactMatchesSelectActionPerformed

    private void searchDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDatabaseActionPerformed
        final JComponent comp = this;
        String db = (String) dbList.getModel().getSelectedItem();
        int readLength = Integer.parseInt((String) dbExactMatches.getModel().getSelectedItem());
        Strand strand = Strand.BOTH;
        if (frDb.isSelected()) {
            strand = Strand.BOTH;
        } else if (fDb.isSelected()) {
            strand = Strand.FORWARD;
        } else if (rDb.isSelected()) {
            strand = Strand.REVERSECOMPLEMENT;
        }

        String sequence = sequenceText.getText();
        if (sequence != null) {
            sequence = sequence.replaceAll("\\s", "");
            sequence = sequence.replaceAll("(\\r|\\n)", "");
            sequence = sequence.replaceAll("\\r\\n", "");
            sequence = sequence.toUpperCase();
            sequence = sequence.replaceAll("U", "T");
            final String seq = sequence;
            try {
                DNASequence dna = new DNASequence(seq);
            } catch (Error e) {
                sequenceText.setText("Sequence contains non DNA characters");
                return;
            }

            CursorToolkitOne.startWaitCursor(comp);
            searchDb.setEnabled(false);
            String rc = publicDatabaseCount.getText();
            int maxCount = 100;
            try {
                maxCount = Integer.parseInt(rc);
            } catch (Exception e) {
                publicDatabaseCount.setText(Integer.toString(100));
            }

            SearchResult.SearchType st = SearchResult.SearchType.TRANSCRIPTS;
            if (db.equalsIgnoreCase("Ensembl Transcript")) {
                st = SearchResult.SearchType.TRANSCRIPTS;
            } // add other database types
            final SearchWorker worker = new SearchWorker(1, 0l, 0, seq.trim(), maxCount, readLength, st, strand);

            SwingWorker<Boolean, Void> sWorker = new SwingWorker<Boolean, Void>() {
                @Override
                protected Boolean doInBackground() throws Exception {
                            worker.loadSearchResults();
                            SearchResultPanel table = new SearchResultPanel();
                            table.setQuerySequence(seq);
                            table.setSearchWorker(worker);
                            table.setPreferredSize(dockingAlignmentDisplay1.getSize());
                            int length = seq.length() < 10 ? seq.length() - 1 : 9;
                            String label = worker.searchType + "_" + worker.searchLength + "_" + worker.maxCount + "_" + seq.substring(0, length) + "...";
                            dockingAlignmentDisplay1.addDisplay(label, table);
                            table.setVisible(true);
                            dockingAlignmentDisplay1.repaint();
                    return true;
                }

                @Override
                protected void done() {
                    dockingAlignmentDisplay1.repaint();
                    searchDb.setEnabled(true);
                    CursorToolkitOne.stopWaitCursor(comp);
                }

            };
            sWorker.execute();        
        
        }
    }//GEN-LAST:event_searchDatabaseActionPerformed

    private void experimentListSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_experimentListSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_experimentListSelectActionPerformed

    private void readsExactMatchesSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readsExactMatchesSelectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_readsExactMatchesSelectActionPerformed

    private void searchReadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchReadsActionPerformed
        final JComponent comp = this;
        long expId = Long.parseLong((String) experimentList.getModel().getSelectedItem());
        int readLength = Integer.parseInt((String) readsExactMatches.getModel().getSelectedItem());
        Strand strand = Strand.BOTH;
        if (frReads.isSelected()) {
            strand = Strand.BOTH;
        } else if (fReads.isSelected()) {
            strand = Strand.FORWARD;
        } else if (rReads.isSelected()) {
            strand = Strand.REVERSECOMPLEMENT;
        }

        String sequence = sequenceText.getText();
        if (sequence != null) {
            sequence = sequence.replaceAll("\\s", "");
            sequence = sequence.replaceAll("(\\r|\\n)", "");
            sequence = sequence.replaceAll("\\r\\n", "");
            sequence = sequence.toUpperCase();
            sequence = sequence.replaceAll("U", "T");
            final String seq = sequence;
            try {
                DNASequence dna = new DNASequence(seq);
            } catch (Error e) {
                sequenceText.setText("Sequence contains non DNA characters");
                return;
            }

            CursorToolkitOne.startWaitCursor(comp);
            searchReads.setEnabled(false);
            String rc = readCount.getText();
            int maxCount = 100;
            try {
                maxCount = Integer.parseInt(rc);
            } catch (Exception e) {
                readCount.setText(Integer.toString(100));
            }

            final SearchWorker worker = new SearchWorker(1, expId, 0, seq.trim(), maxCount, readLength, SearchResult.SearchType.READS, strand);

            SwingWorker<Boolean, Void> sWorker = new SwingWorker<Boolean, Void>() {
                @Override
                protected Boolean doInBackground() throws Exception {
                    worker.loadSearchResults();
                    SearchResultPanel table = new SearchResultPanel();
                    table.setQuerySequence(seq);
                    table.setSearchWorker(worker);
                    table.setPreferredSize(dockingAlignmentDisplay1.getSize());
                    int length = seq.length() < 10 ? seq.length() - 1 : 9;
                    String label = worker.getExperimentId() + "_" + worker.searchType + "_" + worker.searchLength + "_" + worker.maxCount + "_" + seq.substring(0, length) + "...";
                    dockingAlignmentDisplay1.addDisplay(label, table);
                    table.setVisible(true);
                    dockingAlignmentDisplay1.repaint();
                    return true;
                }

                @Override
                protected void done() {
                    dockingAlignmentDisplay1.repaint();
                    searchReads.setEnabled(true);
                    CursorToolkitOne.stopWaitCursor(comp);
                }

            };
            sWorker.execute();
        }
    }//GEN-LAST:event_searchReadsActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        sequenceText.setText(tt.getClipboardContents());
    }//GEN-LAST:event_pasteButtonActionPerformed

    private void reverseComplementCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseComplementCheckBoxActionPerformed
        String sequence = sequenceText.getText();
        if (sequence != null) {
            try {
                sequence = sequence.replaceAll("\\s", "");
                DNASequence seq = new DNASequence(sequence);
                org.biojava3.core.sequence.template.Sequence<NucleotideCompound> rc
                        = new ReversedSequenceView<>(
                                new ComplementSequenceView<>(seq));

                String revComp = rc.getSequenceAsString();
                sequenceText.setText(revComp);
            } catch (Error e) {
                sequenceText.setText("Sequence contains non DNA characters");
            }
        }
    }//GEN-LAST:event_reverseComplementCheckBoxActionPerformed

    private void frDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frDbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_frDbActionPerformed

    private void fDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fDbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fDbActionPerformed

    private void rDbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rDbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rDbActionPerformed

    private void frReadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_frReadsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_frReadsActionPerformed

    private void fReadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fReadsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fReadsActionPerformed

    private void rReadsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rReadsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rReadsActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox dbExactMatches;
    private javax.swing.JComboBox dbList;
    private cache.docking.javadocking.DockingAlignmentDisplay dockingAlignmentDisplay1;
    private javax.swing.JComboBox experimentList;
    private javax.swing.JRadioButton fDb;
    private javax.swing.JRadioButton fReads;
    private javax.swing.JRadioButton frDb;
    private javax.swing.JRadioButton frReads;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton pasteButton;
    private javax.swing.JTextField publicDatabaseCount;
    private javax.swing.JRadioButton rDb;
    private javax.swing.JRadioButton rReads;
    private javax.swing.JTextField readCount;
    private javax.swing.JComboBox readsExactMatches;
    private javax.swing.JCheckBox reverseComplementCheckBox;
    private javax.swing.JButton searchDb;
    private javax.swing.JButton searchReads;
    private javax.swing.JTextArea sequenceText;
    // End of variables declaration//GEN-END:variables
}
